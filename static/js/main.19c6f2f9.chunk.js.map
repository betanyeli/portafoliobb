{"version":3,"sources":["port.jpeg","Components/Description.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Description","_useState","useState","ThisIsMe","_useState2","Object","slicedToArray","me","react_default","a","createElement","className","scr","profilePicture","alt","name","description","App","key","setKey","dist_react_default","options","strings","autoStart","loop","Tabs_default","justify","variant","id","activeKey","onSelect","event","Tab_default","eventKey","title","Components_Description","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sRCiBzBC,EAXK,WAAM,IAAAC,EACDC,mBAASC,GADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACfM,EADeH,EAAA,GAAAA,EAAA,GAEtB,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAgBC,IAAI,KAC9BN,EAAAC,EAAAC,cAAA,UAAKH,EAAGQ,MACRP,EAAAC,EAAAC,cAAA,SAAIH,EAAGS,gCC+CJC,MA9Cf,WAAe,IAAAhB,EACSC,mBAAS,QADlBE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNiB,EADMd,EAAA,GACDe,EADCf,EAAA,GAEb,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEY,QAAS,CACPC,QAAS,CAAC,sCACVC,WAAW,EACXC,MAAM,OAUZhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAMiB,SAAO,EAACC,QAAQ,OAAOC,GAAG,yBAAyBC,UAAWX,EAAKY,SAAU,SAAAC,GAAK,OAAIZ,EAAOY,KACjGvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAKwB,SAAS,OAAOC,MAAM,4BACzB1B,EAAAC,EAAAC,cAACyB,EAAD,OAEF3B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAKwB,SAAS,SAASC,MAAM,0BAC3B1B,EAAAC,EAAAC,cAAA,qBC1BU0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.19c6f2f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/port.3b594a39.jpeg\";","import React, {useState} from 'react'\nimport '../TerminalStyles.css'\nimport ThisIsMe from '../ThisIsMe.json'\nimport profilePicture from '../port.jpeg'\n\n\nconst Description = () => {\n    const [me, setMe]  = useState(ThisIsMe)\n    return (\n        <div className=\"description\">\n            <img scr={profilePicture} alt=\"\"></img>\n            <h1>{me.name}</h1>\n            <p>{me.description}</p>\n        </div>\n    )\n}\n\nexport default Description;","import React, { useState } from 'react';\nimport './App.css';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Description from './Components/Description'\nimport Typewriter from 'typewriter-effect';\n// import NodeComponent from './Components/NodeComponent'\n// import HeaderTerminal from './Components/HeaderTerminal'\nimport './TerminalStyles.css';\n// import { Container, Row, Col } from 'react-bootstrap'\n\n\n\nfunction App() {\n  const [key, setKey] = useState('home');\n  return (\n    <div className=\"App\">\n      <div className=\"header-terminal\">\n        <div className=\"typewriter\">\n        <Typewriter\n          options={{\n            strings: ['Node:/c/Portafolio/Betanyeli-Bravo'],\n            autoStart: true,\n            loop: true,\n          }}\n        />\n\n        </div>\n\n\n\n      </div>\n\n      <Tabs justify variant=\"tabs\" id=\"controlled-tab-example\" activeKey={key} onSelect={event => setKey(event)}>\n        <Tab eventKey=\"home\" title=\" <About me && Contact />\">\n          <Description />\n        </Tab>\n        <Tab eventKey=\"skills\" title=\"<Skills && Projects />\">\n          <p>Holi</p>\n        </Tab>\n    \n      </Tabs>\n      {/* <Container >\n        <Row>\n          <Col sm={12}>\n          <HeaderTerminal />\n            <NodeComponent />\n          </Col>\n\n\n         \n        </Row>\n      </Container> */}\n    </div>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}